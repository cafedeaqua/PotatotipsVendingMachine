language: android
jdk:
  - openjdk7
  - oraclejdk7
  - openjdk6
  - oraclejdk8

matrix:
  allow_failures:
    - jdk: oraclejdk8

notifications:
  email: true

notifications:
  webhooks:
    - https://idobata.io/hook/22ff3a1b-28ad-49e9-8fda-3cfc8493f32a

android:
  components:
    - build-tools-19.1.0
    - android-19
    - sysimg-19
    - android-18
    - sysimg-18
    - android-17
    - sysimg-17
    - android-16
    - sysimg-16
    - android-15
    - sysimg-15
    - extra-android-support
    - extra-google-google_play_services
    - extra-google-m2repository
    - extra-android-m2repository
  licenses:
    - 'android-sdk-preview-license-52d11cd2'
    - 'android-sdk-license-.+'
    - 'google-gdk-license-.+'
    
env:
  global:
  # deploygate api key encryption
   - secure: QsrfAlzxJ67zQcxB/7EDnd54jCphhoE2BZe/rrkby4U6sW3L6XKuf1VJzfzeB9CnwSN9zbtTIwYRo0z1kpz+1hQ9O/ySFpa3yEImSwd9+7gy0dAnMgAdiJ3hw3PQWcYRo3e9LHSEKNCNmpe+0OHzEVFywiInQXTM3vSoyhReiyc=
  # for coverall repo_token
   - secure: LjGmP0cL8W1XwrXJFdTvo5Zn5JjsT0dLiTYixTwHRwtKRBX2b/NYwiaEhSiPm+ppU8VUnwq721eYkvWMv9sTDYtklsW30gx0MfQ+EzPi6a3KCA0TpMAIPnAmR3Mf0dfkMwoscn+aHupW5lbTC9AHGe8NmiUx2BzGakNz0XLiqmw=
   # The next declration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "FGtrP6+n/RcGrnPkhh0kJmfiNKlB8uFtDL60A2yd/ecR/vSvzrfpkl/QQs3yhoQh+K03oqGMCw7w/uVxzq3F/hLDEzt1UDkVeY8V8p33FHK+sC4oAIe0UlMhDRDqgQjm+gyiRBlHdAkz/N2catY7RDvXNmVMl2V6jPKAeGjtdZY="

  matrix:
    - ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-19,sysimg-19
    - ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-19,addon-google_apis-google-19
    - ANDROID_TARGET=android-19  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-19,addon-google_apis_x86-google-19
    - ANDROID_TARGET=android-18  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-18,sysimg-18
    - ANDROID_TARGET=android-17  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-17,sysimg-17
    - ANDROID_TARGET=android-16  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-16,sysimg-16
    - ANDROID_TARGET=android-15  ANDROID_ABI=armeabi-v7a ANDROID_SDKS=android-15,sysimg-15

#    - ANDROID_TARGET=android-19  ANDROID_SDKS=android-19,build-tools-19.0.3,sysimg-19 ANDROID_BUILD_TOOLS_VERSION=19.0.3 ANDROID_ABI=armeabi-v7a
#    - ANDROID_TARGET=android-19  ANDROID_SDKS=android-19,build-tools-19.0.3,sysimg-19 ANDROID_BUILD_TOOLS_VERSION=19.0.3 ANDROID_ABI=x86
#    - ANDROID_TARGET=2  ANDROID_SDKS=android-19,build-tools-19.0.3,addon-google_apis-google-19 ANDROID_BUILD_TOOLS_VERSION=19.0.3
#    - ANDROID_TARGET=2  ANDROID_SDKS=android-19,build-tools-19.0.3,addon-google_apis_x86-google-19 ANDROID_BUILD_TOOLS_VERSION=19.0.3
before_install:
    # Install base Android SDK
#    - sudo apt-get update -qq
#    - if [ `uname -m` = x86_64 ]; then sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch; fi
#    - wget https://dl.google.com/android/android-sdk_r22.6.2-linux.tgz
#    - tar xzf android-sdk_r22.6.2-linux.tgz
#    - export ANDROID_HOME=$PWD/android-sdk-linux
#    - export ANDROID_HOME=`pwd`/android-sdk-linux
#    - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/build-tools/$ANDROID_BUILD_TOOLS_VERSION

    
    # Install required Android components.
    - android list sdk --extended -a

    # Do you accept the license 'android-sdk-license-bcbbd656' [y/n]:
#    - echo y | android update sdk --filter platform-tool,extra-android-support,${ANDROID_SDKS} --no-ui --force
#    - android list target

    # PROVISIONAL: changed SDKr22 build-tools path. create symbolic link
#    - if [ ! -e ${ANDROID_HOME}/platform-tools/aapt ]; then ln -s ${ANDROID_HOME}/build-tools/$ANDROID_BUILD_TOOLS_VERSION/aapt ${ANDROID_HOME}/platform-tools/aapt; fi
#    - if [ ! -e ${ANDROID_HOME}/platform-tools/aidl ]; then ln -s ${ANDROID_HOME}/build-tools/$ANDROID_BUILD_TOOLS_VERSION/aidl ${ANDROID_HOME}/platform-tools/aidl; fi

    # Create and start emulator
#    - export AVD_NAME=test
#    - echo ${ANDROID_TARGET}
#    - echo ${ANDROID_ABI}
#    - if [ "${ANDROID_ABI}" = "" ]; then echo no | android create avd --force -n ${AVD_NAME} -t ${ANDROID_TARGET} ;else echo no | android create avd --force -n ${AVD_NAME} -t ${ANDROID_TARGET} --abi ${ANDROID_ABI} ;fi
#- if [ ${ANDROID_ABI} = "" ];  echo no | android create avd --force -n ${AVD_NAME} -t ${ANDROID_TARGET} ;fi
#    - if [ ${ANDROID_ABI} != "" ]; echo no | android create avd --force -n ${AVD_NAME} -t ${ANDROID_TARGET} --abi ${ANDROID_ABI} ;fi
#    - echo no | android create avd --force -n ${AVD_NAME} -t ${ANDROID_TARGET} --abi ${ANDROID_ABI}
    - emulator -avd ${AVD_NAME} -no-skin -no-audio -no-window &

before_script:
    # Make sure the emulator has started before running tests
#    - chmod +x ./wait_for_emulator
#    - adb wait-for-device 
#    - ./wait_for_emulator
    - echo no | android create avd --force -n test -t $ANDROID_TARGET --abi $ANDROID_ABI
    - emulator -avd test -no-skin -no-audio -no-window &
    - adb wait-for-device
    - chmod +x ./wait_for_emulator
    - adb logcat | tee logcat.txt &
    - ./wait_for_emulator
    - adb shell input keyevent 82 &
  

addons:
  coverity_scan:
    project:
      name: "cafedeaqua/PotatotipsVendingMachine"
      description: "PotatotipsVendingMachine coverity scan"
    notification_email: cafedeaqua@gmail.com
    build_command_prepend: ant -f build.xml emma debug install
    build_command: ant -f tests/build.xml emma debug install test
    branch_pattern: coverity_scan

script:
 - ant -f build.xml emma debug install
 - ant -f tests/build.xml emma debug install test

after_success:
 - adb shell am instrument -e coverage true -w com.andbrowser.potatotipsvendingmachine.test/android.test.InstrumentationTestRunner
 - adb pull /data/data/com.andbrowser.potatotipsvendingmachine/files/coverage.ec .
 - ant -f build.xml clean emma debug
# - ant -f tests/build.xml clean emma debug
 - export SERVICE_NAME=travis-ci
 - java -cp emmacoveralls.jar emma report -r coveralls -in bin/coverage.em,coverage.ec  -sp src/ -Dreport.coveralls.service.name=$SERVICE_NAME -Dreport.coveralls.repotoken=$COVERALLS_REPO_TOKEN -Dreport.coveralls.service.jobid=${TRAVIS_JOB_ID}
 - curl --form 'json_file=@coverage.json' https://coveralls.io/api/v1/jobs
 - curl -F "file=@bin/MainActivity-debug.apk" -F "token=${DEPLOYGATE_API_KEY}" -F "message=Update PotatotipsVendingMachine" https://deploygate.com/api/users/tarotaro4/apps

after_script:
  - pkill -KILL -f tee
  - pkill -KILL -f adb
  
